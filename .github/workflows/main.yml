name: Build and Release Actions

on:
  push:
    tags:
      - v*

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  checklicense:
    name: Check UNITY_LICENSE
    runs-on: ubuntu-latest
    outputs:
      is_unity_license_set: ${{ steps.checklicense_job.outputs.is_unity_license_set }}
    steps:
      - name: Check whether unity activation requests should be done
        id: checklicense_job
        run: |
          echo "Skip activation job: ${{ env.UNITY_LICENSE != '' }}"
          echo "::set-output name=is_unity_license_set::${{ env.UNITY_LICENSE != '' }}"

  activation:
    needs: [ checklicense ]
    if: needs.checklicense.outputs.is_unity_license_set == 'false'
    name: Request activation file ðŸ”‘
    runs-on: ubuntu-latest
    steps:
      # Request manual activation file
      - name: Request manual activation file
        id: getManualLicenseFile
        uses: webbertakken/unity-request-manual-activation-file@master
        with:
          unityVersion: ${{ env.UNITY_VERSION }}
      # Upload artifact (Unity_v20XX.X.XXXX.alf)
      - name: Expose as artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.getManualLicenseFile.outputs.filePath }}
          path: ${{ steps.getManualLicenseFile.outputs.filePath }}

  build:
    needs: [ checklicense ]
    if: needs.checklicense.outputs.is_unity_license_set == 'true'
    name: Build for ${{ matrix.targetPlatform }} (Unity ${{ matrix.unityVersion }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - .
        unityVersion:
          - 2020.1.9f1
        targetPlatform:
          - StandaloneOSX
          - StandaloneWindows
          - StandaloneWindows64
          - StandaloneLinux64
    steps:
      - name: Get the version
        id: getVersion
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      # Checkout
      - uses: actions/checkout@v2
        with:
          lfs: true

      # Cache
      # FIXME it wasn't founded in action 
      - uses: actions/cache@v1.1.0
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-
            Library-

      # Test
      # Currently we don't need testing 
#      - uses: game-ci/unity-test-runner@v1.7
#        id: testRunner
#        with:
#          projectPath: ${{ matrix.projectPath }}
#          unityVersion: ${{ matrix.unityVersion }}

      # Test Output
#      - uses: actions/upload-artifact@v1
#        with:
#          name: Test results (all modes)
#          path: ${{ steps.testRunner.outputs.artifactsPath }}

      # Build
      - uses: game-ci/unity-builder@v2.0-aplha-5
        id: buildRunner
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: labyrinth-${{ matrix.targetPlatform }}-${{ env.RELEASE_VERSION }}

      # Build output
      - uses: fnkr/github-action-ghr@v1
        env:
          GHR_COMPRESS: zip
          GHR_PATH: build/
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
